name: 'Post Coverage Comment Action'
description: 'Prepares and posts a code coverage comment to a PR.'

inputs:
  cli_json_file:
    description: 'Path to CLI coverage-summary.json'
    required: true
  core_json_file:
    description: 'Path to Core coverage-summary.json'
    required: true
  cli_full_text_summary_file:
    description: 'Path to CLI full-text-summary.txt'
    required: true
  core_full_text_summary_file:
    description: 'Path to Core full-text-summary.txt'
    required: true
  node_version:
    description: 'Node.js version for context in messages'
    required: true
  github_token:
    description: 'GitHub token for posting comments'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Prepare Coverage Comment
      id: prep_coverage_comment
      shell: bash
      run: |
        set -euo pipefail

        cli_json_file="${{ inputs.cli_json_file }}"
        core_json_file="${{ inputs.core_json_file }}"
        cli_full_text_summary_file="${{ inputs.cli_full_text_summary_file }}"
        core_full_text_summary_file="${{ inputs.core_full_text_summary_file }}"
        comment_file="coverage-comment.md"

        format_pct() {
          if [ "$1" = "N/A" ]; then echo "N/A"; else echo "$1%"; fi
        }

        # Ensure required JSON files exist
        if [ ! -f "$cli_json_file" ]; then
          echo "Error: CLI coverage summary not found at $cli_json_file" >&2
          exit 1
        fi
        if [ ! -f "$core_json_file" ]; then
          echo "Error: Core coverage summary not found at $core_json_file" >&2
          exit 1
        fi

        # Extract CLI coverage metrics
        cli_lines_pct=$(jq -r '.total.lines.pct' "$cli_json_file")
        cli_statements_pct=$(jq -r '.total.statements.pct' "$cli_json_file")
        cli_functions_pct=$(jq -r '.total.functions.pct' "$cli_json_file")
        cli_branches_pct=$(jq -r '.total.branches.pct' "$cli_json_file")

        # Extract Core coverage metrics
        core_lines_pct=$(jq -r '.total.lines.pct' "$core_json_file")
        core_statements_pct=$(jq -r '.total.statements.pct' "$core_json_file")
        core_functions_pct=$(jq -r '.total.functions.pct' "$core_json_file")
        core_branches_pct=$(jq -r '.total.branches.pct' "$core_json_file")

        # Build markdown coverage comment
        {
          echo "## Code Coverage Summary"
          echo ""
          echo "| Package | Lines | Statements | Functions | Branches |"
          echo "|---------|-------|------------|-----------|----------|"
          echo "| CLI  | $(format_pct "$cli_lines_pct") | $(format_pct "$cli_statements_pct") | $(format_pct "$cli_functions_pct") | $(format_pct "$cli_branches_pct") |"
          echo "| Core | $(format_pct "$core_lines_pct") | $(format_pct "$core_statements_pct") | $(format_pct "$core_functions_pct") | $(format_pct "$core_branches_pct") |"
          echo ""

          echo "<details>"
          echo "<summary>CLI Package - Full Text Report</summary>"
          echo ""
          echo '```text'
          if [ -f "$cli_full_text_summary_file" ]; then
            cat "$cli_full_text_summary_file"
          else
            echo "CLI full-text-summary.txt not found at: $cli_full_text_summary_file"
          fi
          echo '```'
          echo "</details>"
          echo ""

          echo "<details>"
          echo "<summary>Core Package - Full Text Report</summary>"
          echo ""
          echo '```text'
          if [ -f "$core_full_text_summary_file" ]; then
            cat "$core_full_text_summary_file"
          else
            echo "Core full-text-summary.txt not found at: $core_full_text_summary_file"
          fi
          echo '```'
          echo "</details>"
          echo ""

          echo "_For detailed HTML reports, see the 'coverage-reports-${{ inputs.node_version }}' artifact from the main CI run._"
        } > "$comment_file"

    - name: Post Coverage Comment
      uses: thollander/actions-comment-pull-request@v3
      if: always()
      with:
        file-path: coverage-comment.md
        comment-tag: code-coverage-summary
        github-token: ${{ inputs.github_token }}
